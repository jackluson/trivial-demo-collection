//
// Autogenerated by Thrift Compiler (0.14.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require("thrift");
const Thrift = thrift.Thrift;
const Int64 = require("node-int64");

const ttypes = require("./user_types");
//HELPER FUNCTIONS AND STRUCTURES

const UserService_addUser_args = class {
  constructor(args) {
    this.user = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = new ttypes.User(args.user);
      }
    }
  }

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.user = new ttypes.User();
            this.user.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_addUser_args");
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin("user", Thrift.Type.STRUCT, 1);
      this.user.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserService_addUser_result = class {
  constructor(args) {}

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_addUser_result");
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserService_getUser_args = class {
  constructor(args) {
    this.id = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
    }
  }

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.id = input.readString();
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_getUser_args");
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin("id", Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserService_getUser_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new ttypes.User(args.success);
      }
    }
  }

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new ttypes.User();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_getUser_result");
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin("success", Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserServiceClient = (exports.Client = class UserServiceClient {
  constructor(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
  }
  seqid() {
    return this._seqid;
  }
  new_seqid() {
    return (this._seqid += 1);
  }

  addUser(user) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_addUser(user);
    });
  }

  send_addUser(user) {
    const output = new this.pClass(this.output);
    const params = {
      user: user,
    };
    const args = new UserService_addUser_args(params);
    try {
      output.writeMessageBegin(
        "addUser",
        Thrift.MessageType.CALL,
        this.seqid()
      );
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    } catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === "function") {
        output.reset();
      }
      throw e;
    }
  }

  recv_addUser(input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function () {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new UserService_addUser_result();
    result.read(input);
    input.readMessageEnd();

    callback(null);
  }

  getUser(id) {
    this._seqid = this.new_seqid();
    const self = this;
    return new Promise((resolve, reject) => {
      self._reqs[self.seqid()] = (error, result) => {
        return error ? reject(error) : resolve(result);
      };
      self.send_getUser(id);
    });
  }

  send_getUser(id) {
    const output = new this.pClass(this.output);
    const params = {
      id: id,
    };
    const args = new UserService_getUser_args(params);
    try {
      output.writeMessageBegin(
        "getUser",
        Thrift.MessageType.CALL,
        this.seqid()
      );
      args.write(output);
      output.writeMessageEnd();
      return this.output.flush();
    } catch (e) {
      delete this._reqs[this.seqid()];
      if (typeof output.reset === "function") {
        output.reset();
      }
      throw e;
    }
  }

  recv_getUser(input, mtype, rseqid) {
    const callback = this._reqs[rseqid] || function () {};
    delete this._reqs[rseqid];
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(input);
      input.readMessageEnd();
      return callback(x);
    }
    const result = new UserService_getUser_result();
    result.read(input);
    input.readMessageEnd();

    if (null !== result.success) {
      return callback(null, result.success);
    }
    return callback("getUser failed: unknown result");
  }
});
const UserServiceProcessor = (exports.Processor = class UserServiceProcessor {
  constructor(handler) {
    this._handler = handler;
  }
  process(input, output) {
    console.log("input", input, "-->", typeof input.readMessageBegin);
    const r = input.readMessageBegin();
    console.log("r", r);
    if (this["process_" + r.fname]) {
      return this["process_" + r.fname].call(this, r.rseqid, input, output);
    } else {
      input.skip(Thrift.Type.STRUCT);
      input.readMessageEnd();
      const x = new Thrift.TApplicationException(
        Thrift.TApplicationExceptionType.UNKNOWN_METHOD,
        "Unknown function " + r.fname
      );
      output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
      x.write(output);
      output.writeMessageEnd();
      output.flush();
    }
  }
  process_addUser(seqid, input, output) {
    const args = new UserService_addUser_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.addUser.length === 1) {
      Promise.resolve(this._handler.addUser.bind(this._handler)(args.user))
        .then((result) => {
          const result_obj = new UserService_addUser_result({
            success: result,
          });
          output.writeMessageBegin("addUser", Thrift.MessageType.REPLY, seqid);
          result_obj.write(output);
          output.writeMessageEnd();
          output.flush();
        })
        .catch((err) => {
          let result;
          result = new Thrift.TApplicationException(
            Thrift.TApplicationExceptionType.UNKNOWN,
            err.message
          );
          output.writeMessageBegin(
            "addUser",
            Thrift.MessageType.EXCEPTION,
            seqid
          );
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.addUser(args.user, (err, result) => {
        let result_obj;
        if (err === null || typeof err === "undefined") {
          result_obj = new UserService_addUser_result(
            err !== null || typeof err === "undefined"
              ? err
              : { success: result }
          );
          output.writeMessageBegin("addUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(
            Thrift.TApplicationExceptionType.UNKNOWN,
            err.message
          );
          output.writeMessageBegin(
            "addUser",
            Thrift.MessageType.EXCEPTION,
            seqid
          );
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
  process_getUser(seqid, input, output) {
    const args = new UserService_getUser_args();
    args.read(input);
    input.readMessageEnd();
    if (this._handler.getUser.length === 1) {
      Promise.resolve(this._handler.getUser.bind(this._handler)(args.id))
        .then((result) => {
          const result_obj = new UserService_getUser_result({
            success: result,
          });
          output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
          result_obj.write(output);
          output.writeMessageEnd();
          output.flush();
        })
        .catch((err) => {
          let result;
          result = new Thrift.TApplicationException(
            Thrift.TApplicationExceptionType.UNKNOWN,
            err.message
          );
          output.writeMessageBegin(
            "getUser",
            Thrift.MessageType.EXCEPTION,
            seqid
          );
          result.write(output);
          output.writeMessageEnd();
          output.flush();
        });
    } else {
      this._handler.getUser(args.id, (err, result) => {
        let result_obj;
        if (err === null || typeof err === "undefined") {
          result_obj = new UserService_getUser_result(
            err !== null || typeof err === "undefined"
              ? err
              : { success: result }
          );
          output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result_obj = new Thrift.TApplicationException(
            Thrift.TApplicationExceptionType.UNKNOWN,
            err.message
          );
          output.writeMessageBegin(
            "getUser",
            Thrift.MessageType.EXCEPTION,
            seqid
          );
        }
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      });
    }
  }
});
