//
// Autogenerated by Thrift Compiler (0.14.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === "undefined" && typeof require === "function") {
  const Int64 = require("node-int64");
}
// import * as thrift from "thrift/lib/nodejs/lib/thrift/browser";

// console.log("thrift", thrift);

// import User from "./user_types";

// Thrift = thrift.Thrift;
//HELPER FUNCTIONS AND STRUCTURES

const UserService_addUser_args = class {
  constructor(args) {
    this.user = null;
    if (args) {
      if (args.user !== undefined && args.user !== null) {
        this.user = new User(args.user);
      }
    }
  }

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRUCT) {
            this.user = new User();
            this.user.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_addUser_args");
    if (this.user !== null && this.user !== undefined) {
      output.writeFieldBegin("user", Thrift.Type.STRUCT, 1);
      this.user.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserService_addUser_result = class {
  constructor(args) {}

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_addUser_result");
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserService_getUser_args = class {
  constructor(args) {
    this.id = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
    }
  }

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
          if (ftype == Thrift.Type.STRING) {
            this.id = input.readString().value;
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_getUser_args");
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin("id", Thrift.Type.STRING, 1);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserService_getUser_result = class {
  constructor(args) {
    this.success = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new User(args.success);
      }
    }
  }

  read(input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
          if (ftype == Thrift.Type.STRUCT) {
            this.success = new User();
            this.success.read(input);
          } else {
            input.skip(ftype);
          }
          break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write(output) {
    output.writeStructBegin("UserService_getUser_result");
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin("success", Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }
};
const UserServiceClient = class UserServiceClient {
  constructor(input, output) {
    console.dir(output);
    console.log("getTransport", output.getTransport);
    this.input = input;
    this.output = !output ? input : new output(input);
    this.seqid = 0;
  }

  addUser(user) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_addUser(user, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_addUser(user, callback) {
    const params = {
      user: user,
    };
    const args = new UserService_addUser_args(params);
    try {
      this.output.writeMessageBegin(
        "addUser",
        Thrift.MessageType.CALL,
        this.seqid
      );
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null,
          result = null;
        try {
          result = self.recv_addUser();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    } catch (e) {
      if (typeof this.output.getTransport().reset === "function") {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_addUser() {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new UserService_addUser_result();
    result.read(this.input);
    this.input.readMessageEnd();

    return;
  }

  getUser(id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_getUser(id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_getUser(id, callback) {
    const params = {
      id: id,
    };
    const args = new UserService_getUser_args(params);
    try {
      this.output.writeMessageBegin(
        "getUser",
        Thrift.MessageType.CALL,
        this.seqid
      );
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null,
          result = null;
        try {
          result = self.recv_getUser();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    } catch (e) {
      if (typeof this.output.getTransport().reset === "function") {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_getUser() {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new UserService_getUser_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.success) {
      return result.success;
    }
    throw "getUser failed: unknown result";
  }
};

export default UserServiceClient;
